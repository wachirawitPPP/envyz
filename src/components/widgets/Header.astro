---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';
import { getTranslations, t } from '../../i18n';
import logo from '~/assets/images/apsx_logo.png';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash, getAsset } from '~/utils/permalinks';
import type { CallToAction } from '~/types';
import SwitchLang from '../SwitchLang';
import UserDropDown from './UserDropDown';
import HeaderSearchBar from './HeaderSearchBar';
import Menu from './Menu.astro';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
  locale?: any;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
  locale = 'en',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
let isMenuOpen = false;

const toggleMenu = () => {
  isMenuOpen = !isMenuOpen;
};
---

<header
  class:list={[
    'top-0 z-40 mx-auto w-full border-b border-gray-50/0 dark:border-gray-800 rounded-sm transition-opacity ease-in-out',
    isSticky ? 'sticky' : 'relative',
    isDark ? 'dark' : ''
  ]}
  {...isSticky && { 'data-aw-sticky-header': true }}
  {...id && { id }}
>
  <div class="absolute inset-0"></div>

  <div
    class:list={[
      'relative py-3 px-3 md:px-6 w-full mx-auto text-default',
      position !== 'center' ? 'md:flex md:justify-between' : 'md:grid md:grid-cols-3 md:items-center',
      !isFullWidth && 'max-w-full'
    ]}
  >
    <div class="flex justify-between md:justify-start">
      <a class="flex items-center" href={`/${locale}`}>
        <Logo />
      </a>
      <div class="flex items-center gap-2 lg:hidden">
        <SwitchLang locale={locale} client:load />
        
      <ToggleMenu/>        
      </div>
    </div>
    <nav
      class:list={[
        isMenuOpen ? 'block' : 'hidden',
        'absolute top-full left-0 w-full bg-white dark:bg-gray-800 shadow-md flex flex-col items-start gap-4 px-4 py-2 lg:flex lg:items-center lg:static lg:w-auto lg:bg-transparent lg:shadow-none'
      ]}
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col lg:flex-row w-full text-md lg:text-sm font-medium tracking-tight lg:justify-center"
      >
        <li class="lg:mr-4">
          <HeaderSearchBar locale={locale} client:load />
        </li>
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? 'relative group' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="hover:text-[#53b6ac] text-gray-500 dark:hover:text-blue-300 group-hover:bg-gray-100 dark:group-hover:bg-gray-800 rounded-md p-2 flex items-center"
                  >
                    {t(locale, text || '')}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-1 hidden lg:inline" />
                  </button>
                  <ul class="absolute left-0 hidden group-hover:block mt-2 w-48 bg-white dark:bg-dark border border-gray-200 dark:border-gray-700 rounded-md shadow-lg">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          href={href2}
                          class:list={[
                            'block px-4 py-2 text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 dark:text-white',
                            { 'text-[#53b6ac]': href2 === currentPath },
                          ]}
                        >
                          {t(locale, text2 || '')}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  href={`/${locale}/${href}`}
                  class:list={[
                    'hover:text-[#53b6ac] text-gray-500 dark:text-white dark:hover:text-blue-300 rounded-md p-2 flex items-center',
                    { 'bg-[#53b6ac] text-white dark:bg-white dark:text-[#53b6ac]': `/${locale}/${href}` === currentPath }
                  ]}
                >
                  {t(locale, text || '')}
                </a>
              )}
            </li>
          ))
        }
        <li class="lg:mr-4">
          <div class="hidden lg:flex items-center gap-3 justify-end">
            <UserDropDown locale={locale} client:load />
            {showToggleTheme && <ToggleTheme iconClass="w-5 h-5" />}
            <SwitchLang locale={locale} client:load />
          </div>
        </li>
      </ul>
    </nav>
  </div>

<Menu />
</header>
